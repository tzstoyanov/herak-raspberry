; SPDX-License-Identifier: GPL-2.0-or-later
;
; Copyright (C) 2025, Tzvetomir Stoyanov <tz.stoyanov@gmail.com>
;

.program opentherm_tx
; 4kHz, 250us per instruction
.wrap_target
    ; Initialize counter for bit writing loop
    set x, 31        ; Load X with 31 (number of bits to write)

    ; Write start bit (hardware bits are inverted)
    set pins, 0      ; Set pin to LOW
    nop              ; Wait one cycle
    set pins, 1      ; Set pin to HIGH
    nop              ; Wait one cycle

    ; Write the Manchester-encoded data
write_bits:
    out pins, 1      ; Output one bit to the pin
    nop              ; Wait one cycle
    out pins, 1      ; Output another bit to the pin
    jmp x--, write_bits ; Jump if x is nonzero, and decrement x

    ; Write stop bit (hardware bits are inverted)
    set pins, 0      ; Set pin to LOW
    nop              ; Wait one cycle
    set pins, 1      ; Set pin to HIGH
    nop              ; Wait one cycle

    ; Indicate that we're done (push X back to the ISR)
    in x, 32         ; Push the X register into the ISR

loop:
    jmp loop         ; Endless loop (hold state)
.wrap

.program opentherm_rx
; 60kHz, 16.66us per instruction 
.wrap_target
    ; Wait for start bit: transition from HIGH (1) to LOW (0)
    wait 1 pin 0       ; Wait for pin to go HIGH
    wait 0 pin 0       ; Wait for pin to go LOW

    ; Initialize the loop counter (13 loops, 3 ticks per loop: 60kHz = 650us)
    set x, 14          ; Load X with 14
    jmp wait_for_bit_currently_0 ; Jump to bit detection loop

    ; Read the current bit from the GPIO
read_next_bit:
    in pins, 1         ; Shift the current pin state into ISR
    set x, 14          ; Reload the loop counter for timing
    jmp pin, wait_for_bit_currently_1 ; If pin is HIGH, go to "wait_for_bit_currently_1"

    ; Wait for a bit change from LOW (0) to HIGH (1) or timeout
wait_for_bit_currently_0:
    nop                ; No operation, wait one clock cycle
    jmp pin, read_next_bit ; If pin goes HIGH, read the next bit
    jmp x--, wait_for_bit_currently_0 ; Jump if x is nonzero, and decrement x
    jmp read_next_bit  ; Timeout, proceed to read next bit

    ; Wait for a bit change from HIGH (1) to LOW (0) or timeout
wait_for_bit_currently_1:
    nop
    jmp pin, was_still_1 ; If pin is still HIGH, check timeout
    jmp read_next_bit  ; Pin went LOW, read the next bit
was_still_1:
    jmp x--, wait_for_bit_currently_1 ; Decrement X and loop if not zero
    jmp read_next_bit  ; Timeout, proceed to read next bit
.wrap

